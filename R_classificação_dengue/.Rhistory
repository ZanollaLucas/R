source('C:/Users/LucasZan/Desktop/Alura/machine-learning-com-r-classificacao-de-focos-de-dengue-aula3/1.1-Projeto e pergunta.R', echo=TRUE)
source('C:/Users/LucasZan/Desktop/Alura/machine-learning-com-r-classificacao-de-focos-de-dengue-aula3/1.1-Projeto e pergunta.R', echo=TRUE)
#####################
# Dados
#####################
library(DAAG) # pacote
data(dengue) # dados
names(dengue)
summary(dengue) # resumo dos dados
#####################
# Regressﾃδ｣o binomial e grﾃδ｡fico
#####################
# Explicar o conceito de probabilidade utilizando um modelo estatﾃΟstico binomial
mb<-glm(NoYes~humid, data=dengue, family=binomial)
# Com base no modelo criado, ﾃδｩ possﾃΟvel predizer a chance de ser 0/1 com base na "humid"
hn<-data.frame(humid=23) # data frame com o novo valor de humid
predict(mb, hn, type="response") # prediﾃδｧﾃδ｣o do eixo y com base no valor de x
mb2<-glm(NoYes~humid+temp, data=dengue, family=binomial)
summary(mb2) # ambas variﾃδ｡veis foram significativas
hn2<-data.fram(humid=23, temp=20)
hn2<-data.frame(humid=23, temp=20)
predict(mb2, hn2, type="response")
library(lattice)
xyplot(temp ~ humid , data = dengue, groups = NoYes,
panel=function(...){
panel.xyplot(...)
# panel.abline(intercept, slope)
panel.grid(...)
})
#####################
# Preparando os dados (treino e teste)
#####################
set.seed(123) # "para contralar a aleatoriedade"
library(caret) # pacote para o ML
# removendo NAs
dengue2 <- na.omit(dengue)
# dividindo o banco de dados para o modelo
dataindex <- createDataPartition(dengue2$NoYes, p= .7, list=FALSE) # 70%
remove.packages("rlang", lib="~/R/win-library/4.0")
install.packages("caret")
# dividindo o banco de dados para o modelo
dataindex <- createDataPartition(dengue2$NoYes, p= .7, list=FALSE) # 70%
library(caret) # pacote para o ML
install.packages("rlang")
library(caret) # pacote para o ML
# removendo NAs
dengue2 <- na.omit(dengue)
# dividindo o banco de dados para o modelo
dataindex <- createDataPartition(dengue2$NoYes, p= .7, list=FALSE) # 70%
# separando em treino e teste
denguetreino <- dengue2[dataindex,]
dengueteste <- dengue2[-dataindex,]
maiscomum <- sum(denguetreino$NoYes==1) / (dim(denguetreino)[1])
maiscomum
# descobre qual ﾃδｩ a classe mais comum
if (maiscomum >= 0.5) {
print("classeMaisComum <- 1")
classeMaisComum <- 1
} else {
print("classeMaisComum <- 0")
classeMaisComum <- 0
}
taxadeacerto <- sum(dengueteste$NoYes==classeMaisComum) /
(dim(dengueteste)[1])
taxadeacerto
#####################
# Arvore de decisﾃδ｣o
#####################
library(rattle)
modelohumid<-rpart(as.factor(NoYes)~humid, data=denguetreino)
remove.packages("rattle", lib="~/R/win-library/4.0")
install.packages("rattle")
#####################
# Arvore de decisﾃδ｣o
#####################
library(rattle)
modelohumid<-rpart(as.factor(NoYes)~humid, data=denguetreino)
install.packages("rpart")
#####################
# Arvore de decisﾃδ｣o
#####################
library(rattle)
modelohumid<-rpart(as.factor(NoYes)~humid, data=denguetreino)
library(rpart)
modelohumid<-rpart(as.factor(NoYes)~humid, data=denguetreino)
fancyRpartPlot(modelohumid)
modelotree<-rpart(as.factor(NoYes)~trees, data=denguetreino)
fancyRpartPlot(modelotree)
modelofull<-rpart(as.factor(NoYes)~temp+trees, data=denguetreino)
fancyRpartPlot(modelofull)
# Link para todos os algorﾃフmos possﾃプeis: https://topepo.github.io/caret/available-models.html
modeloML1<-train(as.factor(NoYes)~humid+temp+trees, data=denguetreino, method="glm")
library(caret) # pacote para o ML
# Link para todos os algorﾃフmos possﾃプeis: https://topepo.github.io/caret/available-models.html
modeloML1<-train(as.factor(NoYes)~humid+temp+trees, data=denguetreino, method="glm")
install.packages("e1071")
# Link para todos os algorﾃフmos possﾃプeis: https://topepo.github.io/caret/available-models.html
modeloML1<-train(as.factor(NoYes)~humid+temp+trees, data=denguetreino, method="glm")
modeloML2<-train(as.factor(NoYes)~humid+temp+trees, data=denguetreino, method="ranger")
modeloML3<-train(as.factor(NoYes)~humid+temp+trees, data=denguetreino, method="avNNet")
# Avaliando o modelo com o banco de teste
pGLM<-predict(modeloML1, dengueteste)
pRANGER<-predict(modeloML2, dengueteste)
pNNET<-predict(modeloML3, dengueteste)
confusionMatrix(factor(pGLM), factor(dengueteste$NoYes))
confusionMatrix(factor(pRANGER), factor(dengueteste$NoYes))
confusionMatrix(factor(pNNET), factor(dengueteste$NoYes))
#####################
# Curva ROC
#####################
# ROC curve ﾃδｩ o mlehor jeito de achar esse "treshold probability"
library(caTools)
# Predict on test: p
p<-predict(modeloML3, dengueteste, type = "response")
# Predict on test: p
p<-predict(modeloML3, dengueteste, type = "response")
# Make ROC curve
colAUC(pNNET, dengueteste[["NoYes"]], plotROC = TRUE)
library(pROC) # carregando o pacote para as curvas
plot.roc(dengueteste$NoYes, as.numeric(pRANGER), print.auc=TRUE)
plot.roc(dengueteste$NoYes, as.numeric(pGLM), print.auc=TRUE)
plot.roc(dengueteste$NoYes, as.numeric(pNNET), print.auc=TRUE)
modeloML3<-train(as.factor(NoYes)~humid+temp+trees, data=denguetreino, method="avNNet",
importance="impurity") # adicionando o argumento "importance"
plot(varImp(modeloML3, scale = FALSE))
varImp(modeloML3, scale = FALSE)
pNNET<-predict(modeloML3, dengueteste)
confusionMatrix(factor(pNNET), factor(dengueteste$NoYes))
